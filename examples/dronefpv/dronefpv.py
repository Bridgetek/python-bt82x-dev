# Typical command line:
# python attitude.py --connector ft4222module
import sys
import math
import struct
import time

# Add the library directories to the module search path.
sys.path.append('../..')
sys.path.append('../../bteve2')

# This module provides the connector to the EVE hardware.
import apprunner

# Load source code from the "snippets" directory.
sys.path.append('../snippets')
import eveflightcontrols
import evescreenshot
count = 0

HND_LVDSRX = 1

# Incoming signal is 1920 x 1080
LVDSRX_W = 1920
LVDSRX_H = 1080

LVDSRX_CODE_SETUP_VALUE = 0x03   # 2 channels, two pixels per clock
LVDSRX_SETUP_VALUE      = 0x17   # One pixel per clock, 2 channels, VESA 24
LVDSRX_CTRL_VALUE       = 0x8c8c # Ch0 Deskew 0x8, Ch0 clock sel, Frange 0x2

def video_LVDS(eve):
    
    # Size of the overlay controls
    dial_radius = 200

    # Variables detemining how the animation of the widget appears
    anim_pitch = 1.5
    anim_climb = 0.3
    anim_roll = 1
    # Limits of animation positions
    max_pitch = 60
    max_climb = 20
    max_roll = 50
    # Animation counter
    anim = 0

    # Variables to have attitude indicator readings
    pitch = 0
    climb = 0
    roll = 0
    
    print("LVDS start")
    lvds_connected = 1

    eve.LIB_BeginCoProList()
    # LVDSRX System registers
    # This must be swapchain2
    eve.CMD_REGWRITE(eve.REG_LVDSRX_CORE_DEST, eve.SWAPCHAIN_2)
    eve.CMD_REGWRITE(eve.REG_LVDSRX_CORE_FORMAT, eve.FORMAT_RGB8)
    eve.CMD_REGWRITE(eve.REG_LVDSRX_CORE_DITHER, 0)
    eve.CMD_REGWRITE(eve.REG_LVDSRX_CORE_CAPTURE, 1)

    # LVDSRX_CORE_SETUP register
    eve.CMD_REGWRITE(eve.REG_LVDSRX_CORE_SETUP, LVDSRX_CODE_SETUP_VALUE)
    eve.CMD_REGWRITE(eve.REG_LVDSRX_CORE_ENABLE, 1)

    # LVDS startup
    eve.CMD_LVDSINIT(LVDSRX_SETUP_VALUE, LVDSRX_CTRL_VALUE)
    eve.CMD_LVDSSTART()

    # Get the memory address of the SWAPCHAIN_2 buffer
    eve.CMD_WAITCOND(eve.REG_SC2_STATUS, eve.TEST_EQUAL, 1, 1)
    eve.CMD_REGWRITE(eve.REG_SC2_STATUS, 0x3)
    eve.CMD_REGREAD(eve.REG_SC2_ADDR, 0)
    eve.LIB_EndCoProList()
    lvdsrx_data_addr_prev = 0
    lvdsrx_data_addr_new = 0
    lvdsrx_data_addr = eve.LIB_GetResult()

    # Variables detemining how the animation of the widget appears
    anim_pitch = 1.5
    anim_climb = 0.3
    anim_roll = 1
    anim_alt = 0.05
    # Limits of animation positions
    max_pitch = 60
    max_climb = 20
    max_roll = 50
    max_alt = 9500
    # Animation counter
    anim = 0

    # Variables to have attitude indicator readings
    pitch = 0
    climb = 0
    roll = 0
    alt = 0
    
    # Variables for size and position
    # Centre the widgets on the incoming video
    xatt = dial_radius
    yatt = LVDSRX_H - dial_radius
    xalt = LVDSRX_W - dial_radius
    yalt = LVDSRX_H - dial_radius

    # Performance counter
    count = 0

    # Main loop
    while 1:
        frames = 30
        if (count == 0):
            tic = time.perf_counter()
        if (count == frames):
            toc = time.perf_counter()
            print(f"{frames} takes {toc - tic:0.3f} seconds")
            count = 0
        else:
            count = count + 1

        # Test for LVDS connection
        # Get the memory address of the current SWAPCHAIN_2 buffer
        eve.LIB_BeginCoProList()
        eve.CMD_WAITCOND(eve.REG_SC2_STATUS, eve.TEST_EQUAL, 3, 3)
        eve.CMD_REGWRITE(eve.REG_SC2_STATUS, 0x3)
        eve.CMD_REGREAD(eve.REG_SC2_ADDR, 0)
        eve.CMD_LVDSCONN(0)
        eve.LIB_EndCoProList()
        eve.LIB_AwaitCoProEmpty()

        conn = eve.LIB_GetResult(1)
        lvdsrx_data_addr_new = eve.LIB_GetResult(3)

        if (conn == 0):
            # Not connected or synced
            if (lvds_connected == 2) : 
                # Disable LVDS
                print("LVDS sync lost stopped")
                eve.LIB_BeginCoProList()
                eve.CMD_LVDSSTOP()
                eve.LIB_EndCoProList()
                eve.LIB_AwaitCoProEmpty()
                print("stopped")
                lvds_connected = 0
            if (lvds_connected == 0) : 
                # Enable LVDS
                print("LVDS re-start")
                eve.LIB_BeginCoProList()
                eve.CMD_LVDSSTART()
                eve.LIB_EndCoProList()
                eve.LIB_AwaitCoProEmpty()
                print("started")
                lvds_connected = 1
        else:
            if (lvds_connected == 1) : 
                # Sync established
                print("LVDS re-synced")
                # 2 is normal connected state
                lvds_connected = 2

        if (lvdsrx_data_addr != lvdsrx_data_addr_new):

            lvdsrx_data_addr_prev = lvdsrx_data_addr
            lvdsrx_data_addr = lvdsrx_data_addr_new

            eve.LIB_BeginCoProList()
            eve.CMD_DLSTART()
            eve.CLEAR_COLOR_RGB(0, 80, 0)
            eve.CLEAR(1,1,1)

            if (lvds_connected == 2):
                eve.BEGIN(eve.BEGIN_BITMAPS) 
                eve.BITMAP_HANDLE(HND_LVDSRX)
                eve.CMD_SETBITMAP(lvdsrx_data_addr_prev, eve.FORMAT_RGB8, LVDSRX_W, LVDSRX_H)
                eve.VERTEX2F(0, 0)

            eveflightcontrols.attwidget(eve, xatt, yatt, dial_radius, pitch, climb, roll)
            eveflightcontrols.altwidget(eve, xalt, yalt, dial_radius, alt)

            eve.DISPLAY()
            if (count == 50):
                evescreenshot.cmd_screenshot(eve, "dronefpv.bmp")
            count += 1
            eve.CMD_SWAP()
            eve.LIB_EndCoProList()
            eve.LIB_AwaitCoProEmpty()

            exit(0)

            pitch = max_pitch * math.sin(anim * (math.pi/360) * anim_pitch)
            climb = max_climb * math.sin(anim * (math.pi/360) * anim_climb)
            roll = max_roll * math.sin(anim * (math.pi/360) * anim_roll)
            alt = (max_alt / 2) + (max_alt / 2) * math.sin(anim * (math.pi/360) * anim_alt)
            anim+=1

def eve_display(eve):

    fbformat = eve.FORMAT_RGB8
    TXPLLDiv = 0x05
    valcfg = 0

    if (TXPLLDiv > 4):
        valcfg = 0x00300870 + TXPLLDiv
    else:
        valcfg = 0x00301070 + TXPLLDiv

    eve.LIB_BeginCoProList()
    eve.CMD_REGWRITE(eve.REG_LVDSTX_EN, 0)
    eve.CMD_REGWRITE(eve.REG_LVDSTX_PLLCFG, valcfg)
    eve.CMD_REGWRITE(eve.REG_LVDSTX_EN, 7) # Enable PLL

    eve.CMD_REGWRITE(eve.REG_SC2_SIZE, 2)
    # Start the swapchain 2 buffer at 0x6000000 - second buffer immediately after
    eve.CMD_REGWRITE(eve.REG_SC2_PTR0, (6 << 24));
    eve.CMD_REGWRITE(eve.REG_SC2_PTR1, (6 << 24) + (LVDSRX_W * LVDSRX_W * 3));
    eve.LIB_EndCoProList()
    eve.LIB_AwaitCoProEmpty()

    print(f"Swapchain 2: 0x{eve.rd32(eve.REG_SC2_PTR0):x} and 0x{eve.rd32(eve.REG_SC2_PTR1):x}")

    video_LVDS(eve)
    
def loadpatch(eve):
    arr = bytes([
        # Offset 0x00000000 to 0x00000543
        0x7C, 0xDA, 0x00, 0x50, 0x00, 0x20, 0x3C, 0x05, 0x78, 0x9C, 0xED, 0x54,
        0xFF, 0x6F, 0x53, 0x55, 0x14, 0xBF, 0x7D, 0xB7, 0x63, 0xED, 0xBE, 0xF6,
        0xC5, 0x2F, 0x80, 0x6E, 0xA3, 0x31, 0xCE, 0x6A, 0x14, 0x9C, 0xA6, 0x9A,
        0x18, 0x10, 0xEF, 0xD6, 0x2F, 0x6B, 0x99, 0x43, 0x08, 0x53, 0x89, 0xC0,
        0x42, 0x63, 0x3B, 0xD6, 0x64, 0xB4, 0x63, 0xBD, 0x6F, 0x1A, 0xA2, 0x78,
        0x17, 0x90, 0x28, 0x34, 0x74, 0x6C, 0x63, 0x0C, 0x64, 0x38, 0x08, 0x8A,
        0x44, 0x20, 0x9A, 0x60, 0x24, 0x7E, 0x7D, 0xAF, 0x1B, 0xAB, 0xDA, 0xDA,
        0x40, 0x14, 0x42, 0x5C, 0xC0, 0x17, 0xF9, 0x45, 0x13, 0x23, 0x4D, 0x4C,
        0xC0, 0x18, 0xC8, 0xF5, 0xDC, 0xBE, 0x4E, 0x48, 0x4C, 0xFC, 0x0B, 0xDE,
        0x27, 0x79, 0xEF, 0x7E, 0xCE, 0x3D, 0xF7, 0x9E, 0xFB, 0xDE, 0xE7, 0x9C,
        0x7B, 0xD0, 0x18, 0x9A, 0x91, 0xD5, 0x25, 0xC3, 0x68, 0xC6, 0xA3, 0x62,
        0x0D, 0x0D, 0xEC, 0xF4, 0x96, 0xD3, 0x69, 0x6F, 0x05, 0x7D, 0xED, 0x09,
        0xCE, 0x4F, 0x78, 0xCB, 0xFB, 0xA3, 0xE1, 0x48, 0xFC, 0xB1, 0xC5, 0x49,
        0x35, 0x40, 0xB1, 0xB6, 0x8B, 0x1E, 0xA3, 0x1F, 0xD3, 0xDF, 0xE8, 0x5F,
        0xF4, 0x5E, 0xE5, 0x69, 0x25, 0xAE, 0x24, 0x55, 0xCE, 0x37, 0x3F, 0xF7,
        0xFE, 0xCA, 0x26, 0x96, 0x5C, 0x29, 0xB1, 0xD4, 0xE4, 0x86, 0x0E, 0x07,
        0x7D, 0x72, 0x59, 0xB5, 0x7E, 0xC2, 0x7B, 0xC7, 0x2A, 0xAF, 0x93, 0xF6,
        0x85, 0x62, 0x89, 0xAE, 0x48, 0x9F, 0x93, 0x46, 0x37, 0x46, 0xE2, 0x0A,
        0x3D, 0xEF, 0x95, 0x58, 0x13, 0xDB, 0x23, 0x73, 0x7E, 0xD3, 0x2B, 0xA7,
        0x65, 0x15, 0x4D, 0xA0, 0x4B, 0x4D, 0x04, 0xF9, 0xC4, 0x88, 0x32, 0x43,
        0xD5, 0x9C, 0x37, 0x04, 0x1B, 0x82, 0xF5, 0xF4, 0xA0, 0x35, 0x3C, 0x80,
        0x66, 0x7A, 0xD5, 0x64, 0xAE, 0x91, 0xCA, 0x6A, 0xA6, 0x05, 0xAB, 0x30,
        0x6A, 0x8B, 0x08, 0x9A, 0x16, 0x6F, 0x3C, 0x79, 0xFD, 0x2A, 0xD6, 0x5E,
        0x9A, 0xE3, 0xD0, 0x10, 0x0B, 0x11, 0xE3, 0xBD, 0xDB, 0xC6, 0xB9, 0x9F,
        0xA1, 0x8F, 0x70, 0xFE, 0x27, 0x69, 0x7E, 0x67, 0x94, 0x74, 0x35, 0x7C,
        0x20, 0x59, 0xD1, 0xFA, 0x67, 0x7C, 0x5B, 0x2A, 0xEE, 0x2E, 0x63, 0xAD,
        0x84, 0x34, 0xE2, 0x90, 0xDC, 0x53, 0x41, 0x82, 0x8D, 0x72, 0x8F, 0xBF,
        0xF1, 0x21, 0x4B, 0x72, 0x7D, 0x37, 0x3F, 0xEE, 0x75, 0x69, 0xC7, 0xBD,
        0x97, 0xDB, 0xEB, 0xB3, 0xA9, 0x34, 0x1A, 0xC4, 0xE9, 0x82, 0xC4, 0xF9,
        0x52, 0xDA, 0x4C, 0xC5, 0x6C, 0x7D, 0xD6, 0xA1, 0x1D, 0x6A, 0x3E, 0xEA,
        0xC5, 0x6A, 0x2A, 0x8D, 0xD9, 0x85, 0x41, 0x9C, 0xBF, 0xB9, 0xCE, 0x43,
        0x3D, 0xB4, 0xEE, 0x28, 0x66, 0xCF, 0x82, 0xD5, 0xCB, 0xCA, 0x3B, 0xEF,
        0x07, 0x9E, 0x04, 0x5E, 0x07, 0x7C, 0xD1, 0x29, 0x89, 0x39, 0xDE, 0xC4,
        0x79, 0x37, 0x75, 0x01, 0xAB, 0xD8, 0x27, 0xD8, 0xE3, 0xC0, 0x76, 0x8D,
        0xCD, 0xB2, 0x23, 0x82, 0xB9, 0x8F, 0x8F, 0xA2, 0x99, 0x8B, 0x16, 0xCE,
        0xC5, 0xD8, 0xAB, 0xA2, 0xDC, 0x04, 0x8C, 0xA9, 0xB4, 0x61, 0xDB, 0x48,
        0x1D, 0x11, 0x73, 0x0E, 0x86, 0x58, 0x07, 0x91, 0x55, 0x49, 0x5F, 0x43,
        0x85, 0xBE, 0x64, 0xD8, 0x58, 0xBB, 0x8E, 0x8A, 0xFC, 0x58, 0x59, 0x88,
        0xDA, 0x40, 0x5F, 0x5B, 0xBC, 0x3F, 0xD2, 0xD7, 0xD5, 0x13, 0x7F, 0x85,
        0x9F, 0xF7, 0x26, 0x55, 0xCC, 0xD0, 0xB4, 0x31, 0x6F, 0x57, 0x62, 0x61,
        0xC3, 0x71, 0xDE, 0xBB, 0x8E, 0x8A, 0x7D, 0xA4, 0x98, 0xD9, 0x94, 0x56,
        0xF0, 0x75, 0xBB, 0x37, 0xD1, 0x2F, 0x7D, 0x23, 0xC1, 0x91, 0xE0, 0x46,
        0x22, 0x6B, 0x38, 0xFD, 0x99, 0x4F, 0xBC, 0x3F, 0xF5, 0xFD, 0x59, 0xD6,
        0x0B, 0xFB, 0x51, 0xC6, 0xA6, 0x63, 0xED, 0x84, 0x77, 0x4E, 0x5F, 0x64,
        0x43, 0x34, 0x1E, 0xE3, 0x39, 0x6B, 0xBC, 0x38, 0x6B, 0x2F, 0xCE, 0xDA,
        0x23, 0xB1, 0xB0, 0xE1, 0xC8, 0x59, 0x6B, 0xDD, 0x03, 0x6E, 0xCE, 0x1F,
        0x84, 0xFF, 0xFF, 0x75, 0x37, 0xCE, 0xA7, 0xE0, 0xFF, 0x9D, 0xC0, 0x7F,
        0x07, 0x3E, 0x08, 0x1C, 0x33, 0xF7, 0x10, 0xCE, 0xA7, 0x87, 0xD0, 0xCC,
        0x2A, 0xF8, 0xDE, 0x35, 0x6E, 0xBD, 0xBD, 0x5D, 0xD2, 0xDB, 0x3B, 0xA4,
        0x9F, 0xDB, 0x9F, 0x87, 0xF1, 0x05, 0x78, 0x5E, 0x04, 0xBE, 0x5A, 0xDA,
        0x4A, 0xC6, 0xDC, 0xFB, 0xDC, 0xFB, 0xDD, 0xEF, 0xB8, 0x0F, 0xB8, 0xC7,
        0x21, 0x9E, 0x4B, 0x4B, 0xF8, 0x2D, 0xCC, 0xC1, 0xF0, 0xB9, 0x82, 0x67,
        0x67, 0x73, 0x7D, 0xF6, 0x20, 0xAD, 0x29, 0xC3, 0xEC, 0x2D, 0x88, 0x35,
        0x51, 0xFD, 0x08, 0xC4, 0x3F, 0x00, 0x6C, 0x01, 0x2B, 0x6F, 0xA8, 0x52,
        0x65, 0xF5, 0x51, 0x52, 0xA6, 0x9F, 0x5D, 0x0E, 0xD5, 0xFA, 0xDD, 0xDF,
        0x3C, 0xA5, 0x81, 0x7E, 0xA0, 0x70, 0xF8, 0x98, 0x50, 0x98, 0xF3, 0x2E,
        0x32, 0x40, 0x24, 0xE2, 0xD2, 0xE4, 0x33, 0x76, 0xBD, 0x3E, 0xDB, 0x7B,
        0x41, 0xCE, 0x39, 0x34, 0x97, 0xE6, 0xD0, 0x3C, 0x97, 0xAF, 0xF3, 0x2A,
        0xD5, 0x8E, 0x5C, 0xDA, 0x95, 0x16, 0x39, 0x7B, 0x8A, 0x5E, 0x69, 0xA9,
        0xCF, 0x0A, 0x7D, 0xBF, 0xA0, 0x55, 0xA4, 0x11, 0xEA, 0x07, 0x4D, 0xAC,
        0x6D, 0xB5, 0xEB, 0x7F, 0xF8, 0xAF, 0xF9, 0x25, 0x86, 0x27, 0xB1, 0xBE,
        0x36, 0x20, 0x15, 0x54, 0xC8, 0xC0, 0x40, 0xDB, 0x52, 0xFF, 0x7E, 0xD0,
        0x0C, 0x34, 0xFE, 0x0A, 0xE7, 0xEF, 0xF1, 0x5D, 0x68, 0xDD, 0xD2, 0x96,
        0xA6, 0xF3, 0xC9, 0xDB, 0x95, 0x9C, 0xB7, 0xF8, 0xD9, 0x69, 0x74, 0x69,
        0xB2, 0x6D, 0xBC, 0xF9, 0x7B, 0xDF, 0x7C, 0xD2, 0xDF, 0xE6, 0xD2, 0x3E,
        0xF4, 0x8D, 0xC3, 0xB7, 0x27, 0x03, 0xBC, 0xB5, 0x46, 0x5F, 0xE2, 0x1F,
        0x6F, 0xB6, 0x80, 0x86, 0xB2, 0x7A, 0xB0, 0x79, 0x47, 0x60, 0x31, 0x58,
        0x56, 0x66, 0xF0, 0xA7, 0xFC, 0x3B, 0x02, 0x27, 0x7D, 0xBC, 0x15, 0xEB,
        0x55, 0x64, 0x53, 0xDB, 0xE8, 0x50, 0x31, 0xC3, 0x3F, 0xA0, 0xED, 0x78,
        0x6A, 0xB4, 0xA4, 0xDB, 0x70, 0x60, 0x77, 0xC0, 0x38, 0xE7, 0x17, 0x38,
        0x47, 0x62, 0xB6, 0x9D, 0x38, 0x8F, 0x99, 0x73, 0x18, 0xE7, 0x2B, 0x40,
        0x63, 0x89, 0xDD, 0xD8, 0x21, 0xEC, 0x25, 0x60, 0x57, 0x82, 0x26, 0x1D,
        0xC5, 0xFB, 0x22, 0xE7, 0x6A, 0x48, 0x43, 0xD0, 0xA5, 0xDD, 0xFE, 0xAD,
        0x7B, 0x2A, 0x67, 0xF7, 0x4E, 0xC1, 0xDA, 0x6D, 0xB0, 0xB6, 0x06, 0xAA,
        0xE4, 0x2E, 0x25, 0x96, 0x50, 0x7A, 0x7B, 0xE3, 0x7D, 0x34, 0x12, 0x76,
        0x2E, 0x5B, 0xE1, 0x6B, 0x75, 0x26, 0xA2, 0x9B, 0x23, 0xA2, 0x92, 0x38,
        0xAF, 0x05, 0xFF, 0xDC, 0xFF, 0xF8, 0x5F, 0xEE, 0xEE, 0x8B, 0x6F, 0x0C,
        0x89, 0x15, 0x89, 0x48, 0x9D, 0x7E, 0x76, 0xC0, 0xA8, 0xC9, 0x5A, 0x50,
        0x6A, 0x21, 0xB9, 0x41, 0x7F, 0x2C, 0xD9, 0x96, 0x92, 0x7D, 0xB1, 0x64,
        0xDF, 0x77, 0x18, 0x6E, 0xF6, 0x61, 0x38, 0x3D, 0x83, 0xA6, 0xAD, 0x8A,
        0xA5, 0xB6, 0xEA, 0x13, 0xB8, 0x1D, 0x7B, 0x8D, 0x3C, 0x55, 0xC2, 0x39,
        0xB5, 0xD1, 0x58, 0x7F, 0xA8, 0x27, 0x1A, 0x76, 0x86, 0xC2, 0x50, 0x5D,
        0x89, 0x84, 0x88, 0xDF, 0x10, 0x94, 0xD5, 0x2A, 0x86, 0xBF, 0x5D, 0xC0,
        0xD0, 0x69, 0xD8, 0x79, 0xA6, 0x5A, 0x97, 0xD5, 0x79, 0x60, 0xBF, 0xC1,
        0xF0, 0x19, 0x2B, 0xD4, 0x62, 0x83, 0x82, 0x0B, 0x22, 0xB6, 0x54, 0xB0,
        0x7B, 0x1A, 0xED, 0x46, 0xCF, 0x70, 0x68, 0xFF, 0xB7, 0xC7, 0x4E, 0xC4,
        0x1E, 0x71, 0x7B, 0xA4, 0x82, 0xE4, 0x11, 0xFF, 0x28, 0xEA, 0x75, 0x70,
        0x04, 0xE7, 0xE7, 0x96, 0x6A, 0x57, 0x05, 0xBE, 0x1D, 0xB4, 0x99, 0xCD,
        0xC4, 0x8A, 0x09, 0x3C, 0x59, 0x4E, 0x24, 0xFD, 0x81, 0x60, 0x52, 0xED,
        0x1E, 0x34, 0xB4, 0xDD, 0x46, 0x72, 0x35, 0xDF, 0xD4, 0x4C, 0xD5, 0x20,
        0x06, 0xB5, 0x04, 0xB1, 0xB4, 0xE5, 0x3D, 0xE0, 0xF1, 0x68, 0x1E, 0x85,
        0x43, 0xE7, 0xE3, 0x3C, 0xA0, 0xD8, 0xA0, 0x76, 0x03, 0x8A, 0xB8, 0xCF,
        0x01, 0x65, 0x5E, 0x91, 0x8B, 0x6A, 0xC6, 0x69, 0xC3, 0x23, 0x46, 0xE1,
        0x73, 0x69, 0x12, 0xBB, 0xF3, 0x24, 0xCE, 0x5B, 0x18, 0xA8, 0x77, 0x4E,
        0x56, 0xCB, 0x3A, 0xE5, 0x2C, 0xCE, 0x58, 0xF5, 0x82, 0x07, 0x6E, 0x63,
        0xE7, 0xC3, 0x44, 0xCE, 0x5C, 0xBB, 0x5A, 0x9F, 0xDD, 0x52, 0x1D, 0x23,
        0xA2, 0x2F, 0xA6, 0xA6, 0x62, 0x08, 0x6A, 0x5A, 0x71, 0x68, 0xE2, 0x59,
        0x0B, 0x3D, 0xB9, 0x1B, 0xC6, 0xEE, 0x12, 0x87, 0x8A, 0xD8, 0x83, 0xF3,
        0xE4, 0xF3, 0xA8, 0x82, 0x59, 0x00, 0x58, 0xAE, 0xC8, 0x3A, 0x80, 0x5D,
        0x2C, 0xB2, 0x2A, 0x60, 0x63, 0x47, 0x6E, 0xB1, 0x1E, 0xD8, 0xF3, 0x5E,
        0xB1, 0xAF, 0xDB, 0x7B, 0xFA, 0xC3, 0x89, 0x85, 0x4D, 0x8B, 0x44, 0x67,
        0xE7, 0x7C, 0x24, 0x58, 0x5E, 0xAC, 0x18, 0x2B, 0xF4, 0x30, 0xC9, 0x63,
        0x70, 0x24, 0x38, 0xE6, 0xDC, 0xB0, 0x6C, 0x60, 0xD9, 0x3D, 0xB2, 0x5A,
        0x07, 0xAA, 0x96, 0x43, 0x27, 0x16, 0x8A, 0x0B, 0x85, 0xB1, 0xB8, 0x2B,
        0x0C, 0x67, 0x1C, 0x1A, 0xDF, 0xCA, 0xBF, 0x06, 0xED, 0x41, 0x37, 0x98,
        0x99, 0x6C, 0xB4, 0xDF, 0x8A, 0x68, 0xF7, 0x58, 0x06, 0xD0, 0x34, 0x78,
        0x6E, 0x9D, 0xF1, 0x6F, 0xDC, 0x59, 0x3F, 0x9E, 0xBA, 0xDD, 0xFB, 0xBA,
        0x32, 0xED, 0x15, 0xFD, 0xD5, 0x3A, 0x8A, 0xF3, 0xEF, 0x96, 0x7A, 0xAD,
        0x13, 0xF8, 0x04, 0x70, 0xD1, 0x77, 0x56, 0x03, 0x3F, 0x54, 0xE2, 0xAF,
        0x02, 0x3F, 0x0C, 0xB9, 0xE3, 0x26, 0x4C, 0x98, 0x30, 0x61, 0xC2, 0x84,
        0x09, 0x13, 0x26, 0x4C, 0x98, 0x30, 0x61, 0xC2, 0x84, 0x09, 0x13, 0x26,
        0x4C, 0x98, 0x30, 0x61, 0xC2, 0x84, 0x09, 0x13, 0x26, 0x8A, 0xF8, 0x07,
        0x3D, 0x38, 0xF3, 0xDF
    ])
    eve.LIB_BeginCoProList()
    eve.CMD_DLSTART()
    eve.CMD_LOADPATCH(0)
    eve.LIB_WriteDataToCMD(arr)
    eve.LIB_EndCoProList()
    eve.LIB_AwaitCoProEmpty()
    versions = eve.LIB_GetCoProException()
    return (versions)

def attitude(eve):
    # Calibrate the display
    print("Calibrating display...")
    # Calibrate screen if necessary. 
    # Don't do this for now.
    #eve.LIB_AutoCalibrate()
    # Load LVDS extension
    print(loadpatch(eve))
    # Start example code
    print("Starting demo:")

    eve_display(eve)

apprunner.run(attitude)
