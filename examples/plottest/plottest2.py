# Typical command line:
# python plottest2.py --connector ft4222module
import sys
import array

# Add the library directories to the module search path.
sys.path.append('../..')
sys.path.append('../../bteve2')

# Load the extension code from the "common" directory.
sys.path.append('../common')
import extplotmem

# This module provides the connector to the EVE hardware.
import apprunner

# Target EVE device.
family = "BT82x"

def write_memory_block(eve, base_addr, arrint, indices):
    """
    Helper function to write a block of memory.
    :param eve: Graphics device object
    :param base_addr: Base address for memory operations
    :param arrint: Array of 32-bit integers
    :param indices: List of indices to write
    """
    for offset, index in enumerate(indices):
        eve.wr32((base_addr + (offset * 4)), arrint[index])

def plottest2(eve):

    print(extplotmem.loadpatch(eve))

    arr = bytes([
            # Offset 0x00000000 to 0x00000400
            0x33, 0x34, 0x36, 0x35, 0x31, 0x32, 0x30, 0x30, 0x30, 0x33, 0x38, 0x3B,
            0x39, 0x38, 0x36, 0x34, 0x33, 0x34, 0x36, 0x3C, 0x3A, 0x3B, 0x3C, 0x3C,
            0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3B,
            0x39, 0x39, 0x3A, 0x40, 0x41, 0x42, 0x46, 0x44, 0x43, 0x3F, 0x3D, 0x3E,
            0x3E, 0x41, 0x43, 0x44, 0x47, 0x49, 0x44, 0x43, 0x46, 0x46, 0x47, 0x4A,
            0x4D, 0x50, 0x51, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x53, 0x54, 0x57, 0x5A,
            0x5A, 0x5D, 0x5A, 0x59, 0x59, 0x58, 0x5F, 0x65, 0x66, 0x66, 0x69, 0x69,
            0x65, 0x66, 0x64, 0x64, 0x66, 0x6A, 0x6C, 0x6C, 0x6E, 0x6C, 0x6A, 0x69,
            0x67, 0x66, 0x67, 0x65, 0x67, 0x67, 0x68, 0x63, 0x61, 0x5B, 0x57, 0x53,
            0x54, 0x56, 0x56, 0x53, 0x53, 0x4F, 0x4D, 0x4A, 0x46, 0x43, 0x44, 0x44,
            0x46, 0x47, 0x44, 0x47, 0x48, 0x4B, 0x4C, 0x4E, 0x52, 0x56, 0x57, 0x5E,
            0x5D, 0x57, 0x56, 0x53, 0x55, 0x55, 0x57, 0x58, 0x5B, 0x5D, 0x60, 0x5D,
            0x59, 0x58, 0x58, 0x58, 0x59, 0x5B, 0x5E, 0x5F, 0x62, 0x61, 0x5D, 0x5D,
            0x5D, 0x5D, 0x5F, 0x60, 0x5F, 0x62, 0x62, 0x62, 0x60, 0x5A, 0x59, 0x59,
            0x60, 0x62, 0x61, 0x64, 0x63, 0x60, 0x5F, 0x5F, 0x5D, 0x5E, 0x5F, 0x62,
            0x62, 0x64, 0x63, 0x62, 0x61, 0x62, 0x5F, 0x5F, 0x61, 0x63, 0x63, 0x62,
            0x61, 0x5E, 0x5E, 0x5B, 0x5D, 0x5E, 0x61, 0x61, 0x60, 0x61, 0x60, 0x5B,
            0x5B, 0x5B, 0x5A, 0x5D, 0x5F, 0x60, 0x5D, 0x5E, 0x5D, 0x5A, 0x59, 0x5A,
            0x57, 0x59, 0x5A, 0x5B, 0x5E, 0x61, 0x5E, 0x5B, 0x58, 0x59, 0x58, 0x59,
            0x5B, 0x5B, 0x5D, 0x5D, 0x58, 0x55, 0x54, 0x53, 0x53, 0x54, 0x57, 0x56,
            0x59, 0x5F, 0x5B, 0x5A, 0x54, 0x55, 0x52, 0x54, 0x55, 0x57, 0x59, 0x5D,
            0x5A, 0x57, 0x56, 0x57, 0x56, 0x58, 0x5B, 0x61, 0x60, 0x61, 0x5F, 0x5E,
            0x5B, 0x5A, 0x58, 0x5B, 0x62, 0x61, 0x62, 0x62, 0x60, 0x5F, 0x5E, 0x5A,
            0x59, 0x5E, 0x64, 0x66, 0x66, 0x68, 0x66, 0x5E, 0x5D, 0x5D, 0x58, 0x58,
            0x59, 0x58, 0x57, 0x57, 0x56, 0x50, 0x52, 0x51, 0x52, 0x54, 0x55, 0x55,
            0x58, 0x54, 0x50, 0x4F, 0x4E, 0x4C, 0x4E, 0x4E, 0x50, 0x51, 0x51, 0x51,
            0x51, 0x4F, 0x4C, 0x49, 0x4A, 0x4C, 0x4E, 0x50, 0x51, 0x50, 0x4C, 0x4A,
            0x4B, 0x49, 0x4B, 0x4F, 0x4B, 0x4D, 0x4F, 0x4D, 0x4A, 0x44, 0x42, 0x3F,
            0x3E, 0x3F, 0x41, 0x43, 0x4B, 0x52, 0x5B, 0x66, 0x6E, 0x7A, 0x8A, 0x9D,
            0xB3, 0xCB, 0xDB, 0xDE, 0xD4, 0xC8, 0xBC, 0xAA, 0x9A, 0x8A, 0x75, 0x59, # Minimum
            0x47, 0x38, 0x30, 0x30, 0x32, 0x33, 0x38, 0x40, 0x47, 0x4C, 0x4D, 0x4C,
            0x48, 0x43, 0x40, 0x3F, 0x42, 0x44, 0x46, 0x4A, 0x4A, 0x49, 0x44, 0x46,
            0x41, 0x40, 0x42, 0x42, 0x44, 0x47, 0x44, 0x46, 0x46, 0x43, 0x44, 0x42,
            0x44, 0x48, 0x49, 0x4A, 0x4D, 0x4A, 0x47, 0x44, 0x43, 0x43, 0x46, 0x4A,
            0x4A, 0x4B, 0x4A, 0x47, 0x49, 0x46, 0x47, 0x46, 0x48, 0x49, 0x4C, 0x4D,
            0x4F, 0x4F, 0x4E, 0x4D, 0x4A, 0x4B, 0x4B, 0x4D, 0x4E, 0x50, 0x51, 0x52,
            0x52, 0x53, 0x53, 0x52, 0x55, 0x58, 0x5A, 0x5A, 0x5E, 0x5D, 0x5D, 0x5B,
            0x59, 0x59, 0x5D, 0x60, 0x64, 0x65, 0x66, 0x64, 0x66, 0x67, 0x65, 0x66,
            0x69, 0x6E, 0x6F, 0x70, 0x6F, 0x6D, 0x6B, 0x6A, 0x6A, 0x6A, 0x6A, 0x6E,
            0x6F, 0x6F, 0x6D, 0x68, 0x64, 0x61, 0x60, 0x5F, 0x60, 0x5D, 0x60, 0x60,
            0x5D, 0x58, 0x55, 0x53, 0x50, 0x4B, 0x48, 0x4A, 0x4A, 0x49, 0x47, 0x43,
            0x40, 0x3F, 0x3D, 0x3E, 0x42, 0x44, 0x42, 0x43, 0x42, 0x3E, 0x3C, 0x39,
            0x37, 0x39, 0x3C, 0x3B, 0x3F, 0x3D, 0x3E, 0x3A, 0x39, 0x38, 0x38, 0x3B,
            0x3B, 0x3D, 0x40, 0x3E, 0x3E, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x3A, 0x3C,
            0x39, 0x3E, 0x39, 0x3A, 0x3A, 0x38, 0x38, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C,
            0x3A, 0x39, 0x39, 0x38, 0x39, 0x3E, 0x3E, 0x3F, 0x40, 0x41, 0x3F, 0x3D,
            0x3B, 0x3A, 0x39, 0x3B, 0x3C, 0x40, 0x41, 0x42, 0x41, 0x40, 0x3E, 0x3D,
            0x3C, 0x3E, 0x3E, 0x3F, 0x41, 0x41, 0x3F, 0x40, 0x3D, 0x3C, 0x3B, 0x3B,
            0x3E, 0x3F, 0x43, 0x42, 0x3E, 0x3E, 0x3D, 0x3A, 0x38, 0x3C, 0x3C, 0x3E,
            0x40, 0x3F, 0x3C, 0x3B, 0x40, 0x3A, 0x39, 0x3C, 0x3E, 0x3D, 0x41, 0x40,
            0x3C, 0x3A, 0x39, 0x38, 0x38, 0x39, 0x3C, 0x3C, 0x3D, 0x40, 0x3D, 0x3B,
            0x3A, 0x36, 0x36, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x3B, 0x39, 0x3A, 0x3A,
            0x3C, 0x3D, 0x3F, 0x43, 0x42, 0x3F, 0x3C, 0x3E, 0x3D, 0x3C, 0x3C, 0x3F,
            0x41, 0x42, 0x48, 0x43, 0x43, 0x41, 0x40, 0x3F, 0x3F, 0x42, 0x46, 0x48,
            0x49, 0x48, 0x46, 0x46, 0x44, 0x44, 0x44, 0x44, 0x46, 0x49, 0x4B, 0x49,
            0x42, 0x3F, 0x3D, 0x39, 0x3A, 0x3B, 0x3C, 0x3B, 0x3F, 0x3D, 0x38, 0x38,
            0x36, 0x34, 0x37, 0x39, 0x3A, 0x3A, 0x3D, 0x39, 0x39, 0x38, 0x37, 0x37,
            0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x34, 0x33, 0x34, 0x30, 0x32, 0x34,
            0x38, 0x3B, 0x3B, 0x39, 0x38, 0x33, 0x33, 0x30, 0x30, 0x34, 0x35, 0x36,
            0x35, 0x31, 0x2F, 0x2C, 0x27, 0x24, 0x28, 0x2F, 0x3B, 0x49, 0x54, 0x5F,
            0x68, 0x74, 0x7E, 0x96, 0xB0, 0xCA, 0xD5, 0xCE, 0xC5, 0xB8, 0xAA, 0x96, # Minimum
            0x84, 0x6D, 0x56, 0x3E, 0x2C, 0x24, 0x26, 0x2A, 0x2C, 0x2D, 0x33, 0x3A,
            0x39, 0x3E, 0x3D, 0x3B, 0x3C, 0x3C, 0x37, 0x36, 0x34, 0x35, 0x36, 0x38,
            0x3A, 0x3E, 0x3B, 0x3B, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3D, 0x3F, 0x42,
            0x3F, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x3E, 0x3F, 0x40, 0x42, 0x42, 0x40,
            0x3E, 0x3F, 0x40, 0x41, 0x46, 0x49, 0x4A, 0x4A, 0x48, 0x46, 0x42, 0x42,
            0x42, 0x47, 0x48, 0x4A, 0x4E, 0x51, 0x52, 0x4F, 0x4D, 0x4E, 0x4D, 0x4E,
            0x4E, 0x51, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x54, 0x55, 0x59, 0x5D,
            0x5F, 0x60, 0x62, 0x62, 0x64, 0x61, 0x60, 0x62, 0x68, 0x69, 0x6C, 0x6E,
            0x6F, 0x6C, 0x6E, 0x6E, 0x6D, 0x70, 0x74, 0x76, 0x75, 0x77, 0x74, 0x74,
            0x6F, 0x6E, 0x6C, 0x6C, 0x6F, 0x6F, 0x72, 0x75, 0x6F, 0x6D, 0x69, 0x67,
            0x65, 0x64, 0x62, 0x61, 0x60, 0x5B, 0x5A, 0x56, 0x54, 0x52, 0x51, 0x52,
            0x51, 0x51, 0x4F, 0x4E, 0x4D, 0x49, 0x47, 0x44, 0x44, 0x47, 0x48, 0x47,
            0x49, 0x47, 0x44, 0x40, 0x40, 0x3C, 0x3D, 0x3F, 0x41, 0x43, 0x46, 0x43,
            0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x46, 0x48, 0x47, 0x46, 0x40,
            0x41, 0x41, 0x40, 0x3F, 0x40, 0x40, 0x44, 0x48, 0x43, 0x42, 0x40, 0x3E,
            0x3E, 0x41, 0x44, 0x47, 0x48, 0x48, 0x43, 0x42, 0x3D, 0x3F, 0x3F, 0x40,
            0x46, 0x48, 0x49, 0x4A, 0x44, 0x42, 0x3F, 0x3D, 0x40, 0x42, 0x46, 0x46,
            0x47, 0x48, 0x44, 0x43, 0x40, 0x3F, 0x3F, 0x41, 0x44, 0x46, 0x48, 0x49,
            0x44, 0x41, 0x40, 0x3E, 0x3F, 0x43, 0x43, 0x44, 0x47, 0x48, 0x46, 0x42,
            0x41, 0x40, 0x41, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x3F, 0x3F,
            0x40, 0x42, 0x42, 0x43, 0x43, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x40,
            0x42, 0x43, 0x42, 0x41, 0x3F, 0x3E, 0x3D, 0x3C, 0x3F, 0x40, 0x41, 0x43,
            0x44, 0x42, 0x3F, 0x3E, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3F, 0x42, 0x3F,
            0x3C, 0x3C, 0x3E, 0x3D, 0x3C, 0x3F, 0x40, 0x41, 0x43, 0x42, 0x3F, 0x3C,
            0x3B, 0x3C, 0x40, 0x41,
        ])

    eve.LIB_WriteDataToRAMG(arr, 0)

    # demonstrate rendering to a BITMAP in a buffer
    render_addr = 0x8000
    render_format = eve.FORMAT_RGB8
    render_w = 1360
    render_h = 920

    # Set render target to offscreen buffer
    eve.CMD_RENDERTARGET(render_addr, render_format, render_w, render_h)

    eve.LIB_BeginCoProList()
    eve.CMD_DLSTART()
    eve.CLEAR_COLOR_RGB(30, 30, 90)
    eve.CLEAR(1,1,1)

    eve.COLOR_RGB(255, 255, 255)
    eve.VERTEX_FORMAT(0)
    eve.COLOR_RGB(0, 255,0)
    eve.LINE_WIDTH(2 * 8)
    eve.CMD_PLOTDRAW(0, len(arr), eve.OPT_PLOTHORIZONTAL, 14, 10, 0x14000, 0x18000, 1)
    eve.COLOR_RGB(255,0,0)
    eve.CMD_PLOTDRAW(0, len(arr), eve.OPT_PLOTHORIZONTAL | eve.OPT_PLOTFILTER, 0, 0, 0x14000, 0x18000, 2)
    eve.COLOR_RGB(0, 255,0)
    eve.CMD_PLOTDRAW(0, len(arr), eve.OPT_PLOTVERTICAL | eve.OPT_PLOTINVERT | eve.OPT_PLOTFILTER, 100, 2, 0x28000, 0xe000, 3)

    eve.DISPLAY()
    eve.CMD_SWAP()
    eve.LIB_EndCoProList()
    eve.LIB_AwaitCoProEmpty()

    # Set render target back to the to display (SWAPCHAIN0)
    eve.CMD_RENDERTARGET(eve.SWAPCHAIN_0, eve.FORMAT_RGB6, 1920, 1200)

    eve.LIB_BeginCoProList()
    eve.CMD_DLSTART()
    eve.CLEAR_COLOR_RGB(30, 30, 90)
    eve.CLEAR(1,1,1)

    eve.CMD_TEXT(350, 0, 34, 0, "Demo Render Target")
    eve.VERTEX_FORMAT(0) # integer coordinates
    eve.BEGIN(eve.BEGIN_BITMAPS)
    eve.CMD_SETBITMAP(render_addr, render_format, render_w, render_h)
    eve.VERTEX2F(100, 100)

    eve.DISPLAY()
    eve.CMD_SWAP()
    eve.LIB_EndCoProList()
    eve.LIB_AwaitCoProEmpty()

apprunner.run(plottest2)
