# Typical command line:
# python plottest.py --connector ft4222module
import sys
import argparse

import math
import sys
import time
import struct
import gc
import json
import ctypes
import array

import numpy as np

# This is the EVE library.
import bteve2 as eve
# This module provides the connector (gd) to the EVE hardware.
import apprunner

# Target EVE device.
family = "BT82x"

# EVE family support check.
device_families = ["FT80x", "FT81x", "BT81x", "BT82x"]
assert(family in device_families)

if family == "BT82x":
    # This loads BT82x family definitions only.
    import bteve2 as eve
else:
    # This loads FT80x, FT81x, BT81x family definitions.
    import bteve as eve

def plottest(gd):

    print("Loading patch")
    gd.cmd_loadpatch(0)
    with open("assets/plot.patch", "rb") as f:
        gd.load(f)
    gd.finish()
    print("Getting patch version")
    message = gd.rd(eve.RAM_REPORT, 256).strip(b'\x00').decode('ascii')
    if len(message) == 0:
        raise (f"Failed to get text patch version {t:ver}")
    print(message)

    # Option to plot graph horizontally, data on Y-axis
    eve.OPT_PLOTHORIZONTAL = 0
    # Option to plot graph vertically, data on X-axis
    eve.OPT_PLOTVERTICAL = 1 
    # Option to remove duplicate points
    eve.OPT_PLOTFILTER = 2 
    # Option to invert data
    eve.OPT_PLOTINVERT = 4
    # cmd_plotdraw(uint32_t addr, uint16_t len, uint16_t opt, int16_t x, int16_t y, uint32_t xscale, uint32_t yscale)
    def cmd_plotdraw(a, l, o, x, y, sx, sy):
        gd.cc(struct.pack("IIHHhhII", 0xffffffab, a, l, o, x, y, sx, sy))
    gd.cmd_plotdraw = cmd_plotdraw

    gd.begin()
    gd.Clear()
    gd.ColorRGB(255, 255, 255)

    gd.ClearColorRGB(30, 30, 90)
    gd.Clear(1,1,1)

    arr = bytes([
            # Offset 0x00000000 to 0x00000400
            0x33, 0x34, 0x36, 0x35, 0x31, 0x32, 0x30, 0x30, 0x30, 0x33, 0x38, 0x3B,
            0x39, 0x38, 0x36, 0x34, 0x33, 0x34, 0x36, 0x3C, 0x3A, 0x3B, 0x3C, 0x3C,
            0x39, 0x38, 0x39, 0x39, 0x39, 0x3B, 0x3C, 0x3B, 0x3C, 0x3E, 0x3D, 0x3B,
            0x39, 0x39, 0x3A, 0x40, 0x41, 0x42, 0x46, 0x44, 0x43, 0x3F, 0x3D, 0x3E,
            0x3E, 0x41, 0x43, 0x44, 0x47, 0x49, 0x44, 0x43, 0x46, 0x46, 0x47, 0x4A,
            0x4D, 0x50, 0x51, 0x4E, 0x4D, 0x4E, 0x4D, 0x4D, 0x53, 0x54, 0x57, 0x5A,
            0x5A, 0x5D, 0x5A, 0x59, 0x59, 0x58, 0x5F, 0x65, 0x66, 0x66, 0x69, 0x69,
            0x65, 0x66, 0x64, 0x64, 0x66, 0x6A, 0x6C, 0x6C, 0x6E, 0x6C, 0x6A, 0x69,
            0x67, 0x66, 0x67, 0x65, 0x67, 0x67, 0x68, 0x63, 0x61, 0x5B, 0x57, 0x53,
            0x54, 0x56, 0x56, 0x53, 0x53, 0x4F, 0x4D, 0x4A, 0x46, 0x43, 0x44, 0x44,
            0x46, 0x47, 0x44, 0x47, 0x48, 0x4B, 0x4C, 0x4E, 0x52, 0x56, 0x57, 0x5E,
            0x5D, 0x57, 0x56, 0x53, 0x55, 0x55, 0x57, 0x58, 0x5B, 0x5D, 0x60, 0x5D,
            0x59, 0x58, 0x58, 0x58, 0x59, 0x5B, 0x5E, 0x5F, 0x62, 0x61, 0x5D, 0x5D,
            0x5D, 0x5D, 0x5F, 0x60, 0x5F, 0x62, 0x62, 0x62, 0x60, 0x5A, 0x59, 0x59,
            0x60, 0x62, 0x61, 0x64, 0x63, 0x60, 0x5F, 0x5F, 0x5D, 0x5E, 0x5F, 0x62,
            0x62, 0x64, 0x63, 0x62, 0x61, 0x62, 0x5F, 0x5F, 0x61, 0x63, 0x63, 0x62,
            0x61, 0x5E, 0x5E, 0x5B, 0x5D, 0x5E, 0x61, 0x61, 0x60, 0x61, 0x60, 0x5B,
            0x5B, 0x5B, 0x5A, 0x5D, 0x5F, 0x60, 0x5D, 0x5E, 0x5D, 0x5A, 0x59, 0x5A,
            0x57, 0x59, 0x5A, 0x5B, 0x5E, 0x61, 0x5E, 0x5B, 0x58, 0x59, 0x58, 0x59,
            0x5B, 0x5B, 0x5D, 0x5D, 0x58, 0x55, 0x54, 0x53, 0x53, 0x54, 0x57, 0x56,
            0x59, 0x5F, 0x5B, 0x5A, 0x54, 0x55, 0x52, 0x54, 0x55, 0x57, 0x59, 0x5D,
            0x5A, 0x57, 0x56, 0x57, 0x56, 0x58, 0x5B, 0x61, 0x60, 0x61, 0x5F, 0x5E,
            0x5B, 0x5A, 0x58, 0x5B, 0x62, 0x61, 0x62, 0x62, 0x60, 0x5F, 0x5E, 0x5A,
            0x59, 0x5E, 0x64, 0x66, 0x66, 0x68, 0x66, 0x5E, 0x5D, 0x5D, 0x58, 0x58,
            0x59, 0x58, 0x57, 0x57, 0x56, 0x50, 0x52, 0x51, 0x52, 0x54, 0x55, 0x55,
            0x58, 0x54, 0x50, 0x4F, 0x4E, 0x4C, 0x4E, 0x4E, 0x50, 0x51, 0x51, 0x51,
            0x51, 0x4F, 0x4C, 0x49, 0x4A, 0x4C, 0x4E, 0x50, 0x51, 0x50, 0x4C, 0x4A,
            0x4B, 0x49, 0x4B, 0x4F, 0x4B, 0x4D, 0x4F, 0x4D, 0x4A, 0x44, 0x42, 0x3F,
            0x3E, 0x3F, 0x41, 0x43, 0x4B, 0x52, 0x5B, 0x66, 0x6E, 0x7A, 0x8A, 0x9D,
            0xB3, 0xCB, 0xDB, 0xDE, 0xD4, 0xC8, 0xBC, 0xAA, 0x9A, 0x8A, 0x75, 0x59, # Minimum
            0x47, 0x38, 0x30, 0x30, 0x32, 0x33, 0x38, 0x40, 0x47, 0x4C, 0x4D, 0x4C,
            0x48, 0x43, 0x40, 0x3F, 0x42, 0x44, 0x46, 0x4A, 0x4A, 0x49, 0x44, 0x46,
            0x41, 0x40, 0x42, 0x42, 0x44, 0x47, 0x44, 0x46, 0x46, 0x43, 0x44, 0x42,
            0x44, 0x48, 0x49, 0x4A, 0x4D, 0x4A, 0x47, 0x44, 0x43, 0x43, 0x46, 0x4A,
            0x4A, 0x4B, 0x4A, 0x47, 0x49, 0x46, 0x47, 0x46, 0x48, 0x49, 0x4C, 0x4D,
            0x4F, 0x4F, 0x4E, 0x4D, 0x4A, 0x4B, 0x4B, 0x4D, 0x4E, 0x50, 0x51, 0x52,
            0x52, 0x53, 0x53, 0x52, 0x55, 0x58, 0x5A, 0x5A, 0x5E, 0x5D, 0x5D, 0x5B,
            0x59, 0x59, 0x5D, 0x60, 0x64, 0x65, 0x66, 0x64, 0x66, 0x67, 0x65, 0x66,
            0x69, 0x6E, 0x6F, 0x70, 0x6F, 0x6D, 0x6B, 0x6A, 0x6A, 0x6A, 0x6A, 0x6E,
            0x6F, 0x6F, 0x6D, 0x68, 0x64, 0x61, 0x60, 0x5F, 0x60, 0x5D, 0x60, 0x60,
            0x5D, 0x58, 0x55, 0x53, 0x50, 0x4B, 0x48, 0x4A, 0x4A, 0x49, 0x47, 0x43,
            0x40, 0x3F, 0x3D, 0x3E, 0x42, 0x44, 0x42, 0x43, 0x42, 0x3E, 0x3C, 0x39,
            0x37, 0x39, 0x3C, 0x3B, 0x3F, 0x3D, 0x3E, 0x3A, 0x39, 0x38, 0x38, 0x3B,
            0x3B, 0x3D, 0x40, 0x3E, 0x3E, 0x3A, 0x39, 0x39, 0x38, 0x39, 0x3A, 0x3C,
            0x39, 0x3E, 0x39, 0x3A, 0x3A, 0x38, 0x38, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C,
            0x3A, 0x39, 0x39, 0x38, 0x39, 0x3E, 0x3E, 0x3F, 0x40, 0x41, 0x3F, 0x3D,
            0x3B, 0x3A, 0x39, 0x3B, 0x3C, 0x40, 0x41, 0x42, 0x41, 0x40, 0x3E, 0x3D,
            0x3C, 0x3E, 0x3E, 0x3F, 0x41, 0x41, 0x3F, 0x40, 0x3D, 0x3C, 0x3B, 0x3B,
            0x3E, 0x3F, 0x43, 0x42, 0x3E, 0x3E, 0x3D, 0x3A, 0x38, 0x3C, 0x3C, 0x3E,
            0x40, 0x3F, 0x3C, 0x3B, 0x40, 0x3A, 0x39, 0x3C, 0x3E, 0x3D, 0x41, 0x40,
            0x3C, 0x3A, 0x39, 0x38, 0x38, 0x39, 0x3C, 0x3C, 0x3D, 0x40, 0x3D, 0x3B,
            0x3A, 0x36, 0x36, 0x3A, 0x3B, 0x3D, 0x3D, 0x3D, 0x3B, 0x39, 0x3A, 0x3A,
            0x3C, 0x3D, 0x3F, 0x43, 0x42, 0x3F, 0x3C, 0x3E, 0x3D, 0x3C, 0x3C, 0x3F,
            0x41, 0x42, 0x48, 0x43, 0x43, 0x41, 0x40, 0x3F, 0x3F, 0x42, 0x46, 0x48,
            0x49, 0x48, 0x46, 0x46, 0x44, 0x44, 0x44, 0x44, 0x46, 0x49, 0x4B, 0x49,
            0x42, 0x3F, 0x3D, 0x39, 0x3A, 0x3B, 0x3C, 0x3B, 0x3F, 0x3D, 0x38, 0x38,
            0x36, 0x34, 0x37, 0x39, 0x3A, 0x3A, 0x3D, 0x39, 0x39, 0x38, 0x37, 0x37,
            0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x34, 0x33, 0x34, 0x30, 0x32, 0x34,
            0x38, 0x3B, 0x3B, 0x39, 0x38, 0x33, 0x33, 0x30, 0x30, 0x34, 0x35, 0x36,
            0x35, 0x31, 0x2F, 0x2C, 0x27, 0x24, 0x28, 0x2F, 0x3B, 0x49, 0x54, 0x5F,
            0x68, 0x74, 0x7E, 0x96, 0xB0, 0xCA, 0xD5, 0xCE, 0xC5, 0xB8, 0xAA, 0x96, # Minimum
            0x84, 0x6D, 0x56, 0x3E, 0x2C, 0x24, 0x26, 0x2A, 0x2C, 0x2D, 0x33, 0x3A,
            0x39, 0x3E, 0x3D, 0x3B, 0x3C, 0x3C, 0x37, 0x36, 0x34, 0x35, 0x36, 0x38,
            0x3A, 0x3E, 0x3B, 0x3B, 0x39, 0x38, 0x39, 0x38, 0x3C, 0x3D, 0x3F, 0x42,
            0x3F, 0x3B, 0x3A, 0x39, 0x3A, 0x39, 0x3E, 0x3F, 0x40, 0x42, 0x42, 0x40,
            0x3E, 0x3F, 0x40, 0x41, 0x46, 0x49, 0x4A, 0x4A, 0x48, 0x46, 0x42, 0x42,
            0x42, 0x47, 0x48, 0x4A, 0x4E, 0x51, 0x52, 0x4F, 0x4D, 0x4E, 0x4D, 0x4E,
            0x4E, 0x51, 0x52, 0x53, 0x52, 0x52, 0x52, 0x52, 0x54, 0x55, 0x59, 0x5D,
            0x5F, 0x60, 0x62, 0x62, 0x64, 0x61, 0x60, 0x62, 0x68, 0x69, 0x6C, 0x6E,
            0x6F, 0x6C, 0x6E, 0x6E, 0x6D, 0x70, 0x74, 0x76, 0x75, 0x77, 0x74, 0x74,
            0x6F, 0x6E, 0x6C, 0x6C, 0x6F, 0x6F, 0x72, 0x75, 0x6F, 0x6D, 0x69, 0x67,
            0x65, 0x64, 0x62, 0x61, 0x60, 0x5B, 0x5A, 0x56, 0x54, 0x52, 0x51, 0x52,
            0x51, 0x51, 0x4F, 0x4E, 0x4D, 0x49, 0x47, 0x44, 0x44, 0x47, 0x48, 0x47,
            0x49, 0x47, 0x44, 0x40, 0x40, 0x3C, 0x3D, 0x3F, 0x41, 0x43, 0x46, 0x43,
            0x40, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x42, 0x46, 0x48, 0x47, 0x46, 0x40,
            0x41, 0x41, 0x40, 0x3F, 0x40, 0x40, 0x44, 0x48, 0x43, 0x42, 0x40, 0x3E,
            0x3E, 0x41, 0x44, 0x47, 0x48, 0x48, 0x43, 0x42, 0x3D, 0x3F, 0x3F, 0x40,
            0x46, 0x48, 0x49, 0x4A, 0x44, 0x42, 0x3F, 0x3D, 0x40, 0x42, 0x46, 0x46,
            0x47, 0x48, 0x44, 0x43, 0x40, 0x3F, 0x3F, 0x41, 0x44, 0x46, 0x48, 0x49,
            0x44, 0x41, 0x40, 0x3E, 0x3F, 0x43, 0x43, 0x44, 0x47, 0x48, 0x46, 0x42,
            0x41, 0x40, 0x41, 0x43, 0x43, 0x43, 0x42, 0x42, 0x42, 0x41, 0x3F, 0x3F,
            0x40, 0x42, 0x42, 0x43, 0x43, 0x42, 0x3F, 0x3F, 0x3F, 0x3D, 0x3E, 0x40,
            0x42, 0x43, 0x42, 0x41, 0x3F, 0x3E, 0x3D, 0x3C, 0x3F, 0x40, 0x41, 0x43,
            0x44, 0x42, 0x3F, 0x3E, 0x3B, 0x3B, 0x3B, 0x3D, 0x3C, 0x3F, 0x42, 0x3F,
            0x3C, 0x3C, 0x3E, 0x3D, 0x3C, 0x3F, 0x40, 0x41, 0x43, 0x42, 0x3F, 0x3C,
            0x3B, 0x3C, 0x40, 0x41,
        ])

    # Turn byte array into uint32s
    arrint = array.array('I', arr)

    # Program graph data into RAM_G
    for i,a in enumerate(arrint):
        gd.wr32(i * 4, a)
    
    gd.VertexFormat(0)
    gd.ColorRGB(0, 255,0)
    gd.LineWidth(2)
    gd.cmd_plotdraw(0, len(arr), eve.OPT_PLOTHORIZONTAL, 14, 10, 0x14000, 0x18000)
    gd.ColorRGB(255,0,0)
    gd.cmd_plotdraw(0, len(arr), eve.OPT_PLOTHORIZONTAL | eve.OPT_PLOTFILTER, 0, 0, 0x14000, 0x18000)
    gd.ColorRGB(0, 255,0)
    gd.cmd_plotdraw(0, len(arr), eve.OPT_PLOTVERTICAL | eve.OPT_PLOTINVERT | eve.OPT_PLOTFILTER, 100, 2, 0x28000, 0xe000)

    gd.Display()
    gd.swap()
    gd.finish()

apprunner.run(plottest)
